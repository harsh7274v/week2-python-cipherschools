print(1,2,3,4,5,sep=",")
def func(a,b,c):
    print(a)
    print(b)
    print(c)
func(1,2,3)

#keyworded arguments
def func(a,b,c):
    print(a)
    print(b)
    print(c)
func(a=1,b=2,c=3)

def func(a):
    print(a)
func(1)

def hello():
    print("Hello World !")
hello()
a=1
a=hello

print(type(a))
hello=2
print(hello)
a() 

def b():
    print("Hi")
def b():
    print("Bye")
'''
It is same as saying,
a=1
a=2

#required arguments
def func(a,b):
    print(a,b)
func(1,2)

#default arguments
def func(a=1,b=2):
    print(a,b)
func()
func(1)
func(1,2)

#optional arguments
def func(*a):
    print(*a)
func(1,2,3,4)

#required keyworded only arguments
def func(a,b,*c):
    print(a)
    print(b)
    print(c)
func(1,2,3,4,"jatin",1.5)
'''
1
2
(3, 4, 'jatin', 1.5)
'''
"""
def func(a,b,*c,d):
    print(a)
    print(b)
    print(c)
    print(d)
func(1,2,3,4,5,6,7,8)
#TypeError: func() missing 1 required keyword-only argument: 'd'
Computer acts in a very deterministic manner since thier iq is 0
If i give any asterisk argument in my function defination then 
all the rest of the argument will become keyword only arguments
So,
def func(a,b,*c,d):
    print(a)
    print(b)
    print(c)
    print(d)
func(1,2,3,4,5,6,7,d=8)
"""
#default keyworded only arguments
def func(a,b,*c,d,e="harsh"):
    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
func(1,2,3,4,5,6,7,d=8)


                       #optional keyworded only arguments
'''
def func(**k):
    print(k)
func(1,2,3,4,5)
  
  
  
def func(**k):
    print(k)
func(a=1,b=2)

print(sorted([1,4,3,8,6]))
#Anonymous functions or lambda functions

#lambda is always a one liner function, it can only contain a single expression inside it
a=lambda a,b: a+b #Expression that return a function
print(a(1,2))

a=1
b=2
c=print(a,b)
print(c)
